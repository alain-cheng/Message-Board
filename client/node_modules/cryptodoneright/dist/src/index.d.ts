/// <reference types="node" />
declare const _default: {
    secure_password(unsecured_password: string, callback?: (err?: any, response?: string) => any): Promise<any>;
    verify_password(input_password_str: string, secured_password_hex: string, callback?: (err?: any, response?: boolean) => any): Promise<any>;
    encrypt_data(data: any, callback?: (err?: any, response?: Buffer) => {}): Promise<any>;
    encrypt_data_with_key(key: string, data: any, callback?: (err?: any, response?: Buffer) => {}): Promise<any>;
    decrypt_data(encrypted_data: Buffer, password: string, callback?: (err?: any, response?: any) => {}): Promise<any>;
    encrypt_stream_with_key(key: string, credentials_callback?: (err: any, credentials?: {
        key: string;
        header: string;
    }) => void): import("stream").Transform;
    decrypt_stream_with_key(key_hex: string, header_hex: string): import("stream").Transform;
    generate_keys(seed?: string, callback?: (err?: any, response?: {
        public: string;
        private: string;
    }) => any): Promise<any>;
    get_data_type(data: any, callback?: (err?: any, response?: string) => any): Promise<any>;
    hash: typeof import("./tasks/hash").hash;
    derive_public_key: typeof import("./tasks/keys").derive_public_key;
    generate_master_key: typeof import("./tasks/keys").generate_master_key;
    derive_subkey: typeof import("./tasks/keys").derive_subkey;
    sign_data: typeof import("./tasks/sign_verify").sign_data;
    verify_data: typeof import("./tasks/sign_verify").verify_data;
    generate_random_string: typeof import("./tasks/random").random_string;
};
export default _default;
