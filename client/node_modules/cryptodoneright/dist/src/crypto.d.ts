/// <reference types="node" />
import * as hashes from "./tasks/hash";
import * as keys from "./tasks/keys";
import * as random from "./tasks/random";
import * as signverify from "./tasks/sign_verify";
export declare function secure_password(unsecured_password: string, callback?: (err?: any, response?: string) => any): Promise<any>;
export declare function verify_password(input_password_str: string, secured_password_hex: string, callback?: (err?: any, response?: boolean) => any): Promise<any>;
export declare const hash: typeof hashes.hash;
export declare function encrypt_data(data: any, callback?: (err?: any, response?: Buffer) => {}): Promise<any>;
export declare function encrypt_data_with_key(key: string, data: any, callback?: (err?: any, response?: Buffer) => {}): Promise<any>;
export declare function decrypt_data(encrypted_data: Buffer, password: string, callback?: (err?: any, response?: any) => {}): Promise<any>;
export declare function encrypt_stream_with_key(key: string, credentials_callback?: (err: any, credentials?: {
    key: string;
    header: string;
}) => void): import("stream").Transform;
export declare function decrypt_stream_with_key(key_hex: string, header_hex: string): import("stream").Transform;
export declare function generate_keys(seed?: string, callback?: (err?: any, response?: {
    public: string;
    private: string;
}) => any): Promise<any>;
export declare const derive_public_key: typeof keys.derive_public_key;
export declare const generate_master_key: typeof keys.generate_master_key;
export declare const derive_subkey: typeof keys.derive_subkey;
export declare const sign_data: typeof signverify.sign_data;
export declare const verify_data: typeof signverify.verify_data;
export declare const generate_random_string: typeof random.random_string;
export declare function get_data_type(data: any, callback?: (err?: any, response?: string) => any): Promise<any>;
