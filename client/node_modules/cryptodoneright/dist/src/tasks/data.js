"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var promised_callback_1 = __importDefault(require("promised-callback"));
var sodium_universal_1 = __importDefault(require("sodium-universal"));
function encrypt(data, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var done, key, state, header, edata_len, encrypted_data;
                        return __generator(this, function (_a) {
                            done = promised_callback_1["default"](resolve, reject, callback).done;
                            key = Buffer.alloc(sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_KEYBYTES);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_keygen(key);
                            state = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_state_new();
                            header = Buffer.alloc(sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_HEADERBYTES);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_init_push(state, header, key);
                            edata_len = data.length + sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_ABYTES;
                            encrypted_data = Buffer.alloc(edata_len);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_push(state, encrypted_data, data, null, sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_FINAL);
                            done({
                                encrypted_data: encrypted_data,
                                key: key.toString("hex"),
                                header: header.toString("hex")
                            });
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.encrypt = encrypt;
function encrypt_with_key(data, key_hex, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, _b, key, state, header, edata_len, encrypted_data;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                                    if (key_hex.length !== 64) {
                                        error("bad key length");
                                        return [2];
                                    }
                                    return [4, get_encryption_header(key_hex)["catch"](error)];
                                case 1:
                                    _b = _c.sent(), key = _b.key, state = _b.state, header = _b.header;
                                    edata_len = data.length + sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_ABYTES;
                                    encrypted_data = Buffer.alloc(edata_len);
                                    sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_push(state, encrypted_data, data, null, sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_FINAL);
                                    done({
                                        encrypted_data: encrypted_data,
                                        key: key.toString("hex"),
                                        header: header.toString("hex")
                                    });
                                    return [2];
                            }
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.encrypt_with_key = encrypt_with_key;
function encrypt_chunk(chunk, state, finalize) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var done, TAG, edata_len, encrypted_data;
                        return __generator(this, function (_a) {
                            done = promised_callback_1["default"](resolve, reject, null).done;
                            TAG = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
                            if (finalize) {
                                TAG = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_FINAL;
                            }
                            edata_len = chunk.length + sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_ABYTES;
                            encrypted_data = Buffer.alloc(edata_len);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_push(state, encrypted_data, chunk, null, TAG);
                            done(encrypted_data);
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.encrypt_chunk = encrypt_chunk;
function get_encryption_header(key_hex, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, key, header, state;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            if (key_hex.length !== 64) {
                                error("bad key length");
                                return [2];
                            }
                            key = Buffer.from(key_hex, "hex");
                            header = Buffer.alloc(sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_HEADERBYTES);
                            state = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_state_new();
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_init_push(state, header, key);
                            done({ key: key, state: state, header: header });
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.get_encryption_header = get_encryption_header;
function decrypt(encrypted_data, key_hex, header_hex, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var done, key, header, state, dedata_len, decrypted_data;
                        return __generator(this, function (_a) {
                            done = promised_callback_1["default"](resolve, reject, callback).done;
                            key = Buffer.from(key_hex, "hex");
                            header = Buffer.from(header_hex, "hex");
                            state = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_state_new();
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_init_pull(state, header, key);
                            dedata_len = encrypted_data.length - sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_ABYTES;
                            decrypted_data = Buffer.alloc(dedata_len);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_pull(state, decrypted_data, sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_FINAL, encrypted_data);
                            done(decrypted_data);
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.decrypt = decrypt;
function get_decryption_header(key_hex, header_hex, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, key, header, state;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            if (key_hex.length !== 64) {
                                error("bad key length");
                                return [2];
                            }
                            key = Buffer.from(key_hex, "hex");
                            header = Buffer.from(header_hex, "hex");
                            state = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_state_new();
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_init_pull(state, header, key);
                            done({ state: state });
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.get_decryption_header = get_decryption_header;
function decrypt_chunk(chunk, state, finalize) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var done, TAG, dedata_len, decrypted_data;
                        return __generator(this, function (_a) {
                            done = promised_callback_1["default"](resolve, reject, null).done;
                            TAG = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
                            if (finalize) {
                                TAG = sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_TAG_FINAL;
                            }
                            dedata_len = chunk.length - sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_ABYTES;
                            decrypted_data = Buffer.alloc(dedata_len);
                            sodium_universal_1["default"].crypto_secretstream_xchacha20poly1305_pull(state, decrypted_data, TAG, chunk);
                            done(decrypted_data);
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.decrypt_chunk = decrypt_chunk;
exports["default"] = { encrypt: encrypt, decrypt: decrypt, encrypt_with_key: encrypt_with_key };
