"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
exports.__esModule = true;
var fs_1 = __importDefault(require("fs"));
var stream_1 = require("stream");
var src_1 = __importDefault(require("../src/"));
describe("Data", function () {
    test("should encrypt and decrypt a stream of binary data with a preset key", function (done) { return __awaiter(_this, void 0, void 0, function () {
        function credentials_callback(err, credentials) {
            creds = credentials;
            expect(creds.header).toBeDefined();
            expect(creds.key).toEqual(key);
        }
        var readableStreamEncrypt, writableStreamEncrypt, readableStreamDecrypt, writableStreamDecrypt, bin, creds, encrypted_buffer, decrypted_buffer, key, stream_encryptor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    readableStreamEncrypt = new stream_1.Stream.Readable();
                    writableStreamEncrypt = new stream_1.Stream.Writable();
                    readableStreamDecrypt = new stream_1.Stream.Readable();
                    writableStreamDecrypt = new stream_1.Stream.Writable();
                    bin = fs_1["default"].readFileSync(__dirname + "/photo.jpg");
                    creds = {};
                    encrypted_buffer = [];
                    decrypted_buffer = [];
                    return [4, src_1["default"].generate_random_string(64)];
                case 1:
                    key = _a.sent();
                    stream_encryptor = src_1["default"].encrypt_stream_with_key(key, credentials_callback);
                    readableStreamEncrypt.pipe(stream_encryptor).pipe(writableStreamEncrypt);
                    writableStreamEncrypt._write = function (data) {
                        if (data) {
                            expect(typeof data).toEqual("object");
                            encrypted_buffer.push(data);
                        }
                    };
                    stream_encryptor.on("finish", function () {
                        var encrypted_combined = Buffer.concat(encrypted_buffer);
                        expect(typeof encrypted_combined).toEqual("object");
                        var stream_decryptor = src_1["default"].decrypt_stream_with_key(creds.key, creds.header);
                        readableStreamDecrypt.pipe(stream_decryptor).pipe(writableStreamDecrypt);
                        writableStreamDecrypt._write = function (data) {
                            if (data) {
                                expect(typeof data).toEqual("object");
                                decrypted_buffer.push(data);
                            }
                        };
                        stream_decryptor.on("finish", function () {
                            var decrypted_combined = Buffer.concat(decrypted_buffer);
                            expect(typeof decrypted_combined).toEqual("object");
                            expect(decrypted_combined).toEqual(bin);
                            done();
                        });
                        readableStreamDecrypt.push(encrypted_combined);
                        readableStreamDecrypt.push(null);
                    });
                    readableStreamEncrypt.push(bin);
                    readableStreamEncrypt.push(null);
                    return [2];
            }
        });
    }); });
    test("should encrypt and decrypt text with preset key", function () { return __awaiter(_this, void 0, void 0, function () {
        var key, text, encrypted_text, decrypted_text;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, src_1["default"].generate_random_string(64)];
                case 1:
                    key = _a.sent();
                    text = "How to paint endless paintings 101: [todo: the rest]";
                    return [4, src_1["default"].encrypt_data_with_key(key, text)];
                case 2:
                    encrypted_text = _a.sent();
                    expect(encrypted_text).toHaveProperty("encrypted_data");
                    expect(encrypted_text).toHaveProperty("password");
                    expect(encrypted_text.password).toHaveLength(113);
                    expect(encrypted_text.password.slice(0, 64)).toEqual(key);
                    return [4, src_1["default"].decrypt_data(encrypted_text.encrypted_data, encrypted_text.password)];
                case 3:
                    decrypted_text = _a.sent();
                    expect(decrypted_text).toEqual(text);
                    return [2];
            }
        });
    }); });
    test("should encrypt and decrypt text", function () { return __awaiter(_this, void 0, void 0, function () {
        var text, encrypted_text, decrypted_text;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    text = "How to paint endless paintings 101: [todo: the rest]";
                    return [4, src_1["default"].encrypt_data(text)];
                case 1:
                    encrypted_text = _a.sent();
                    expect(encrypted_text).toHaveProperty("encrypted_data");
                    expect(encrypted_text).toHaveProperty("password");
                    expect(encrypted_text.password).toHaveLength(113);
                    return [4, src_1["default"].decrypt_data(encrypted_text.encrypted_data, encrypted_text.password)];
                case 2:
                    decrypted_text = _a.sent();
                    expect(decrypted_text).toEqual(text);
                    return [2];
            }
        });
    }); });
    test("should encrypt and decrypt json", function () { return __awaiter(_this, void 0, void 0, function () {
        var json, encrypted_json, decrypted_json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    json = { foo: "bar " };
                    return [4, src_1["default"].encrypt_data(json)];
                case 1:
                    encrypted_json = _a.sent();
                    expect(encrypted_json).toHaveProperty("encrypted_data");
                    expect(encrypted_json).toHaveProperty("password");
                    expect(encrypted_json.password).toHaveLength(113);
                    return [4, src_1["default"].decrypt_data(encrypted_json.encrypted_data, encrypted_json.password)];
                case 2:
                    decrypted_json = _a.sent();
                    expect(decrypted_json).toEqual(json);
                    return [2];
            }
        });
    }); });
    test("should encrypt and decrypt integers and floats", function () { return __awaiter(_this, void 0, void 0, function () {
        var int, encrypted_int, decrypted_int, float, encrypted_float, decrypted_float;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    int = 4;
                    return [4, src_1["default"].encrypt_data(int)];
                case 1:
                    encrypted_int = _a.sent();
                    expect(encrypted_int).toHaveProperty("encrypted_data");
                    expect(encrypted_int).toHaveProperty("password");
                    expect(encrypted_int.password).toHaveLength(113);
                    return [4, src_1["default"].decrypt_data(encrypted_int.encrypted_data, encrypted_int.password)];
                case 2:
                    decrypted_int = _a.sent();
                    expect(decrypted_int).toEqual(int);
                    float = 4.00000002;
                    return [4, src_1["default"].encrypt_data(float)];
                case 3:
                    encrypted_float = _a.sent();
                    expect(encrypted_float).toHaveProperty("encrypted_data");
                    expect(encrypted_float).toHaveProperty("password");
                    expect(encrypted_float.password).toHaveLength(113);
                    return [4, src_1["default"].decrypt_data(encrypted_float.encrypted_data, encrypted_float.password)];
                case 4:
                    decrypted_float = _a.sent();
                    expect(decrypted_float).toEqual(float);
                    return [2];
            }
        });
    }); });
    test("should encrypt and decrypt binary (await/async & callback)", function () { return __awaiter(_this, void 0, void 0, function () {
        var bin, encrypted_bin, decrypted_bin;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bin = fs_1["default"].readFileSync(__dirname + "/photo.jpg");
                    return [4, src_1["default"].encrypt_data(bin)];
                case 1:
                    encrypted_bin = _a.sent();
                    expect(encrypted_bin).toHaveProperty("encrypted_data");
                    expect(encrypted_bin).toHaveProperty("password");
                    expect(encrypted_bin.password).toHaveLength(113);
                    return [4, src_1["default"].decrypt_data(encrypted_bin.encrypted_data, encrypted_bin.password)];
                case 2:
                    decrypted_bin = _a.sent();
                    expect(decrypted_bin).toEqual(bin);
                    return [2];
            }
        });
    }); });
});
