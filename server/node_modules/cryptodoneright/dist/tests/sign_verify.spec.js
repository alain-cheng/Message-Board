"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
exports.__esModule = true;
var fs_1 = __importDefault(require("fs"));
var src_1 = __importDefault(require("../src"));
function unexpected_error(err) {
    expect(err).toBeNull();
}
describe("Keys", function () {
    test("should generate master key that can derive subkeys", function () { return __awaiter(_this, void 0, void 0, function () {
        var master_key, known_master_key, sub_key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, src_1["default"].generate_master_key()["catch"](unexpected_error)];
                case 1:
                    master_key = _a.sent();
                    expect(master_key.length).toEqual(64);
                    known_master_key = "dc1045f79cee141bea070310b00505332ef9341db4888ae76d49b0fc06a9b5c8";
                    return [4, src_1["default"].derive_subkey(known_master_key, 1, "TEST")["catch"](unexpected_error)];
                case 2:
                    sub_key = _a.sent();
                    expect(sub_key).toEqual("7a96c677f21cff75e9fa8f6a805df0cbdad428c4d4a2935faef50bde7c65f95a3dbf3b8763accfa43de2f374070291d32fd22f788027957e1e169e7bbbb66dad");
                    return [2];
            }
        });
    }); });
    test("should generate valid public and private key pair", function () { return __awaiter(_this, void 0, void 0, function () {
        var keypair;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, src_1["default"].generate_keys()["catch"](unexpected_error)];
                case 1:
                    keypair = _a.sent();
                    expect(keypair).toHaveProperty("public");
                    expect(keypair).toHaveProperty("private");
                    return [2];
            }
        });
    }); });
    test.skip("should be able to derive public key from private key", function () { return __awaiter(_this, void 0, void 0, function () {
        var keypair, public_key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, src_1["default"].generate_keys()["catch"](unexpected_error)];
                case 1:
                    keypair = _a.sent();
                    return [4, src_1["default"].derive_public_key(keypair.private)];
                case 2:
                    public_key = _a.sent();
                    expect(keypair.public).toEqual(public_key);
                    return [2];
            }
        });
    }); });
});
describe("Signing and Verification", function () {
    var keypair = { private: "", public: "" };
    beforeAll(function (done) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, src_1["default"].generate_keys()["catch"](unexpected_error)];
                case 1:
                    keypair = _a.sent();
                    done();
                    return [2];
            }
        });
    }); });
    test("should sign and verify text (await/async & callback)", function () { return __awaiter(_this, void 0, void 0, function () {
        var text, signed_text, verified_text;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    text = "How to paint endless paintings 101: [todo: the rest]";
                    return [4, src_1["default"].sign_data(keypair.private, text)];
                case 1:
                    signed_text = _a.sent();
                    expect(typeof signed_text).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_text, text, keypair.public)];
                case 2:
                    verified_text = _a.sent();
                    expect(verified_text).toBeTruthy();
                    return [2];
            }
        });
    }); });
    test("should sign and verify json (await/async & callback)", function () { return __awaiter(_this, void 0, void 0, function () {
        var json, signed_json, verified_json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    json = { foo: "bar " };
                    return [4, src_1["default"].sign_data(keypair.private, json)];
                case 1:
                    signed_json = _a.sent();
                    expect(typeof signed_json).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_json, json, keypair.public)];
                case 2:
                    verified_json = _a.sent();
                    expect(verified_json).toBeTruthy();
                    return [2];
            }
        });
    }); });
    test("should sign and verify integers and floats (await/async & callback)", function () { return __awaiter(_this, void 0, void 0, function () {
        var int, signed_int, verified_int, float, signed_float, verified_float;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    int = 4;
                    return [4, src_1["default"].sign_data(keypair.private, int)];
                case 1:
                    signed_int = _a.sent();
                    expect(typeof signed_int).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_int, int, keypair.public)];
                case 2:
                    verified_int = _a.sent();
                    expect(verified_int).toBeTruthy();
                    float = 4.00000002;
                    return [4, src_1["default"].sign_data(keypair.private, float)];
                case 3:
                    signed_float = _a.sent();
                    expect(typeof signed_float).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_float, float, keypair.public)];
                case 4:
                    verified_float = _a.sent();
                    expect(verified_float).toBeTruthy();
                    return [2];
            }
        });
    }); });
    test("should sign and verify binary (await/async & callback)", function () { return __awaiter(_this, void 0, void 0, function () {
        var bin, signed_bin, verified_bin;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    bin = fs_1["default"].readFileSync(__dirname + "/photo.jpg");
                    return [4, src_1["default"].sign_data(keypair.private, bin)];
                case 1:
                    signed_bin = _a.sent();
                    expect(typeof signed_bin).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_bin, bin, keypair.public)];
                case 2:
                    verified_bin = _a.sent();
                    expect(verified_bin).toBeTruthy();
                    return [2];
            }
        });
    }); });
    test("should fail to sign and verify text with bad key", function () { return __awaiter(_this, void 0, void 0, function () {
        var text, signed_text, wrong_keypair;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    text = "How to paint endless paintings 101: [todo: the rest]";
                    return [4, src_1["default"].sign_data(keypair.private, text)];
                case 1:
                    signed_text = _a.sent();
                    return [4, src_1["default"].generate_keys()["catch"](unexpected_error)];
                case 2:
                    wrong_keypair = _a.sent();
                    expect(typeof signed_text).toEqual("string");
                    return [4, src_1["default"].verify_data(signed_text, text, wrong_keypair.public)["catch"](function (err) {
                            expect(err).toBeTruthy();
                        })];
                case 3:
                    _a.sent();
                    return [2];
            }
        });
    }); });
});
