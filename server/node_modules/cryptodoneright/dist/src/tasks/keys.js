"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var promised_callback_1 = __importDefault(require("promised-callback"));
var sodium_universal_1 = __importDefault(require("sodium-universal"));
function generate_master_key(callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, key;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            try {
                                key = Buffer.alloc(sodium_universal_1["default"].crypto_kdf_KEYBYTES);
                                sodium_universal_1["default"].crypto_kdf_keygen(key);
                                done(key.toString("hex"));
                            }
                            catch (err) {
                                error(err);
                            }
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.generate_master_key = generate_master_key;
function derive_subkey(master_key, subkey_id_number, subkey_name, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, context, subkey;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            try {
                                context = Buffer.alloc(sodium_universal_1["default"].crypto_kdf_CONTEXTBYTES, subkey_name);
                                subkey = Buffer.alloc(sodium_universal_1["default"].crypto_kdf_BYTES_MAX);
                                sodium_universal_1["default"].crypto_kdf_derive_from_key(subkey, subkey_id_number, context, Buffer.from(master_key, "hex"));
                                done(subkey.toString("hex"));
                            }
                            catch (err) {
                                error(err);
                            }
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.derive_subkey = derive_subkey;
function generate(seed, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error, rand, key_pair, digest, keys;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            try {
                                rand = Buffer.alloc(sodium_universal_1["default"].crypto_sign_SEEDBYTES);
                                sodium_universal_1["default"].randombytes_buf(rand);
                                key_pair = {
                                    publicKey: Buffer.alloc(sodium_universal_1["default"].crypto_sign_PUBLICKEYBYTES),
                                    privateKey: Buffer.alloc(sodium_universal_1["default"].crypto_sign_SECRETKEYBYTES)
                                };
                                if (seed) {
                                    digest = Buffer.alloc(32);
                                    sodium_universal_1["default"].crypto_generichash(digest, Buffer.from(seed));
                                    sodium_universal_1["default"].crypto_sign_seed_keypair(key_pair.publicKey, key_pair.privateKey, seed);
                                }
                                else {
                                    sodium_universal_1["default"].crypto_sign_keypair(key_pair.publicKey, key_pair.privateKey);
                                }
                                keys = {
                                    type: "Ed25519",
                                    private: key_pair.privateKey.toString("hex"),
                                    public: key_pair.publicKey.toString("hex")
                                };
                                done(keys);
                            }
                            catch (e) {
                                error(e);
                            }
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.generate = generate;
function derive_public_key(private_key, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, done, error;
                        return __generator(this, function (_b) {
                            _a = promised_callback_1["default"](resolve, reject, callback), done = _a.done, error = _a.error;
                            try {
                                done(null);
                            }
                            catch (err) {
                                error(err);
                            }
                            return [2];
                        });
                    }); })];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
exports.derive_public_key = derive_public_key;
exports["default"] = {
    generate: generate
};
