'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isUrl = require('is-url');

var _isUrl2 = _interopRequireDefault(_isUrl);

var _schema_org = require('./schema_org');

var _schema_org2 = _interopRequireDefault(_schema_org);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var reClass = /^rdfs:Class$|^http:\/\/www.w3.org\/2000\/01\/rdf-schema#Class$/;

var SchemaOrg = function () {
  function SchemaOrg() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, SchemaOrg);

    if (!Array.isArray(data)) {
      data = [data];
    }

    this.graph = Array.prototype.concat.apply(_schema_org2.default['@graph'], data.map(function (d) {
      return d['@graph'];
    })).filter(function (node) {
      return !(0, _isUrl2.default)(node['@id']);
    });

    this.prefixMap = [_schema_org2.default['@context']].concat(data.filter(function (entry) {
      return entry['@context'];
    }).map(function (entry) {
      return entry['@context'];
    })).reduce(function (prefixMap, ctx) {
      Object.keys(ctx).forEach(function (key) {
        if (!~key.indexOf(':')) {
          var value = ctx[key]['@id'] || ctx[key];
          if ((0, _isUrl2.default)(value)) {
            prefixMap[key] = value;
          }
        }
      });
      return prefixMap;
    }, {});

    this.prefixes = new Set(this.graph.map(function (node) {
      return node['@id'].split(':')[0];
    }));
    this.nodeMap = this.graph.reduce(function (nodeMap, node) {
      nodeMap[node['@id'].split(':')[1]] = node;
      return nodeMap;
    }, {});

    // memoize
    this._cache = Object.getOwnPropertyNames(Object.getPrototypeOf(this)).reduce(function (cache, key) {
      cache[key] = {};
      return cache;
    }, {});

    // TODO generalize
    this.is = function () {
      if (Array.isArray(arguments[0])) {
        return SchemaOrg.prototype.is.apply(this, arguments);
      }
      var type = arguments[0] && arguments[0]['@type'] || arguments[0];
      if (type in this._cache.is && arguments[1] in this._cache.is[type]) {
        return this._cache.is[type][arguments[1]];
      }
      var value = SchemaOrg.prototype.is.apply(this, arguments);
      if (!(type in this._cache.is)) {
        this._cache.is[type] = {};
      }
      this._cache.is[type][[arguments[1]]] = value;
      return value;
    }.bind(this);
  }

  _createClass(SchemaOrg, [{
    key: 'getParents',
    value: function getParents(className) {
      var subClassOfChain = void 0;
      if (this.nodeMap[className] && this.nodeMap[className].subClassOf) {
        var unprefixed = this.unprefix(this.nodeMap[className].subClassOf);
        subClassOfChain = new Set(unprefixed);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = unprefixed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var c = _step.value;

            var gsubClassOfChain = this.getParents(c);
            if (gsubClassOfChain) {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = gsubClassOfChain.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var p = _step2.value;

                  if (!subClassOfChain.has(p)) {
                    subClassOfChain.add(p);
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      return subClassOfChain || new Set();
    }
  }, {
    key: 'get',
    value: function get(term) {
      return this.nodeMap[term];
    }
  }, {
    key: 'expand',
    value: function expand(term) {
      var value = this.get(term);
      if (!value || !value['@id']) return value;
      var splt = value['@id'].split(':');
      if (splt.length === 2 && splt[0] in this.prefixMap) {
        return this.prefixMap[splt[0]] + splt[1];
      } else {
        return term;
      }
    }
  }, {
    key: 'is',
    value: function is(type, className) {
      var typeList = arrayify(type);

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = typeList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var typeItem = _step3.value;

          typeItem = typeItem && typeItem['@type'] || typeItem;
          if (typeItem === className || this.getParents(typeItem).has(className)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return false;
    }
  }, {
    key: 'unprefix',
    value: function unprefix(terms) {
      var _this = this;

      return arrayify(terms).filter(function (term) {
        var splt = term.split(':');
        return splt.length === 2 && _this.prefixes.has(splt[0]);
      }).map(function (term) {
        return term.split(':')[1];
      });
    }
  }, {
    key: 'getSubClasses',
    value: function getSubClasses(className) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var subClasses = new Set();
      for (var key in this.nodeMap) {
        if (reClass.test(this.nodeMap[key]['@type'])) {
          if (recursive) {
            var parents = this.getParents(key);
            if (parents && parents.size && parents.has(className) && !subClasses.has(key)) {
              subClasses.add(key);
            }
          } else {
            if (this.nodeMap[key].subClassOf && ~this.unprefix(this.nodeMap[key].subClassOf).indexOf(className)) {
              subClasses.add(key);
            }
          }
        }
      }
      return subClasses;
    }
  }, {
    key: 'isMoreSpecific',
    value: function isMoreSpecific(typea, typeb) {
      var parents = this.getParents(typea);

      if (!(parents && parents.size)) return false;
      return parents.has(typeb);
    }
  }, {
    key: 'getType',
    value: function getType(obj) {
      var _this2 = this;

      var moreSpecificOrEqualThan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (obj['@type']) return obj['@type'];

      moreSpecificOrEqualThan = arrayify(moreSpecificOrEqualThan);

      var candidates = new Set();
      Object.keys(obj).forEach(function (key) {
        if (_this2.nodeMap[key] && _this2.nodeMap[key].domain) {
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            var _loop = function _loop() {
              var d = _step4.value;

              if (!candidates.has(d) && moreSpecificOrEqualThan.every(function (t) {
                return _this2.isMoreSpecific(d, t);
              })) {
                candidates.add(d);
              }
            };

            for (var _iterator4 = _this2.unprefix(_this2.nodeMap[key].domain)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              _loop();
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        }
      });

      moreSpecificOrEqualThan.forEach(function (t) {
        if (!candidates.has(t)) {
          candidates.add(t);
        }
      });

      if (!candidates.size) {
        return;
      }

      if (candidates.size === 1) {
        return Array.from(candidates)[0];
      }

      //at least 2 candidates...
      //for each candidate, compute number of matches with the props of obj, if clear winner -> return it, if  equality, return undefined

      var scores = {};
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        var _loop2 = function _loop2() {
          var c = _step5.value;

          var parents = _this2.getParents(c);
          scores[c] = 0;
          Object.keys(obj).forEach(function (p) {
            if (_this2.nodeMap[p] && _this2.nodeMap[p].domain && parents && parents.size && _this2.unprefix(_this2.nodeMap[p].domain).some(function (d) {
              return d === c || parents.has(d);
            })) {
              scores[c]++;
            }
          });
        };

        for (var _iterator5 = candidates.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          _loop2();
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var sortedScores = Object.keys(scores).map(function (x) {
        return { type: x, score: scores[x] };
      }).sort(function (a, b) {
        return b.score - a.score;
      });

      if (sortedScores[0].score === sortedScores[1].score) {
        return; //cannot identify unambiguously
      }

      return sortedScores[0].type;
    }
  }]);

  return SchemaOrg;
}();

exports.default = SchemaOrg;


function arrayify(x) {
  return Array.isArray(x) ? x : [x];
}
module.exports = exports['default'];